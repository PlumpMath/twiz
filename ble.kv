#:set color_x (1, 0, 0, 1)
#:set color_y (0, 1, 0, 1)
#:set color_z (0, 0, 1, 1)
#:set bgcolor (0/255., 23/255., 33/255., 1)
#:set red (1, 0, 0, 1)
#:set white (1, 1, 1, 1)
#:set line '48dp'
#:set small_line '32dp'
#:import chain itertools.chain

#:set ploog_address_width '150sp'
#:set ploog_id_width '100sp'
#:set ploog_power_width '60sp'
#:set ploog_activate_width '50sp'
#:set ploog_visu_width '50sp'

#:set config_ip_width '100sp'
#:set config_port_width '50sp'
#:set config_address_width '100sp'
#:set config_content_width '100sp'
#:set config_delete_width '50sp'
#:set config_sensor_width '50sp'
#:set config_active_width '50sp'
#:set config_event_type_width '120sp'
#:set config_midi_channel_width '60sp'
#:set config_event_id_width '80sp'
#:set config_event_value_width '80sp'

ScrollView:
    canvas.before:
        Color:
            rgba: bgcolor
        Rectangle:
            pos: self.pos
            size: self.size
    GridLayout:
        size_hint_y: None
        height: self.minimum_height
        cols: 1
        ScanPanel:
            id: scan

        DevicesPanel:
            id: visu

<ScanPanel>:
    height: max(logo.height, box.height)
    orientation: 'vertical'
    size_hint_y: None
    GridLayout:
        id: box
        cols: 1
        size_hint_y: None
        height: self.minimum_height
        ToggleButton:
            text: 'scan'
            id: unfold
            state: 'down'
            size_hint_y: None
            height: self.texture_size[1] + 10

        BoxLayout:
            size_hint_y: None
            height: scrollview.height
            orientation: 'vertical'
            ScrollView:
                id: scrollview
                pos: root.pos
                size_hint_y: None
                max_height: '200sp'
                height: min(self.max_height, grid.height) if unfold.state == 'down' else 0
                GridLayout:
                    id: grid
                    cols: 1
                    size_hint_y: None
                    height: self.minimum_height
                    GridLayout:
                        cols: 1
                        size_hint_y: None
                        height: self.minimum_height
                        BoxLayout:
                            size_hint_y: None
                            height: line
                            Label:
                                text: 'address'
                                size_hint_x: None
                                width: ploog_address_width
                            Label:
                                text: 'id'
                                size_hint_x: None
                                width: ploog_id_width
                            Label:
                                text: 'power'
                                size_hint_x: None
                                width: ploog_power_width
                            Label:
                                text: 'activate'
                                size_hint_x: None
                                width: ploog_activate_width
                            Label:
                                text: 'visu'
                                size_hint_x: None
                                width: ploog_visu_width

                    GridLayout:
                        id: results
                        size_hint_y: None
                        height: self.minimum_height
                        cols: 1

            Image:
                id: logo
                # source: 'data/Logo vertical.png'
                size_hint: None, None
                size: self.texture_size
                top: self.size and root.top - 10
                right: self.size and root.right - 10

<DevicesPanel>:
    height: box.height
    size_hint_y: None
    GridLayout:
        id: box
        cols: 1
        size_hint_y: None
        height: self.minimum_height
        ToggleButton:
            text: 'visu'
            id: unfold
            state: 'down'
            size_hint_y: None
            height: self.texture_size[1] + 10

        ScrollView:
            id: scrollview
            pos: root.pos
            size_hint_y: None
            height: content.height if unfold.state == 'down' else 0

            GridLayout:
                cols: 1
                id: content
                size_hint_y: None
                height: self.minimum_height

<GraphZone>:
    size_hint_y: None
    height: self.minimum_height
    cols: 1
    GridLayout:
        size_hint_y: None
        height: self.minimum_height
        rows: 1
        pos_hint: {'center': (.5, .5)}
        GridLayout:
            size_hint: None, None
            size: self.minimum_size
            cols: 4
            Widget:
            Label:
                color: color_x
                text: 'x'
                size_hint: None, None
                size: '48sp', '48sp'
            Label:
                color: color_y
                text: 'y'
                size_hint: None, None
                size: self.texture_size
                size: '48sp', '48sp'
            Label:
                color: color_z
                text: 'z'
                size_hint: None, None
                size: self.texture_size
                size: '48sp', '48sp'

            Button:
                text: 'euler'
                size_hint: None, None
                size: self.texture_size
                size: '48sp', '48sp'
                on_press: root.focus = 'euler'
            Label:
                text: '%x' % root.device.rx[-1] if root.device else ''
            Label:
                text: '%x' % root.device.ry[-1] if root.device else ''
            Label:
                text: '%x' % root.device.rz[-1] if root.device else ''

            Button:
                text: 'accel'
                size_hint: None, None
                size: self.texture_size
                size: '48sp', '48sp'
                on_press: root.focus = 'accelero'
            Label:
                text: '%x' % root.device.ax[-1] if root.device else ''
            Label:
                text: '%x' % root.device.ay[-1] if root.device else ''
            Label:
                text: '%x' % root.device.az[-1] if root.device else ''

        Graph:
            device: root.device
            focus: root.focus

<Graph>:
    focus: ''
    line_x: {'euler': root.device.rx, 'accelero': root.device.ax}[root.focus] if root.device else [0]
    line_y: {'euler': root.device.ry, 'accelero': root.device.ay}[root.focus] if root.device else [0]
    line_z: {'euler': root.device.rz, 'accelero': root.device.az}[root.focus] if root.device else [0]
    data_len: min(max(map(len, (self.line_x, self.line_y, self.line_z))), 100)
    max_value: 0xffff if self.focus == 'accelero' else 180
    min_value: 0 if self.focus == 'accelero' else - 180
    size_hint_x: None
    width: '500sp'
    canvas:
        Color:
            rgba: color_x
        Line:
            points:
                chain(*[
                (root.x + x * self.width / root.data_len,
                self.y + self.height * (y - self.min_value) / (root.max_value - root.min_value))
                for x, y in enumerate(root.line_x[-100:])
                ]) if root.data_len and root.max_value and root.line_x else ()
        Color:
            rgba: color_y
        Line:
            points:
                chain(*[
                (root.x + x * self.width / root.data_len,
                self.y + self.height * (y - self.min_value) / (root.max_value - root.min_value))
                for x, y in enumerate(root.line_y[-100:])
                ]) if root.data_len and root.max_value and root.line_y else ()
        Color:
            rgba: color_z
        Line:
            points:
                chain(*[
                (root.x + x * self.width / root.data_len,
                self.y + self.height * (y - self.min_value) / (root.max_value - root.min_value))
                for x, y in enumerate(root.line_z[-100:])
                ]) if root.data_len and root.max_value and root.line_z else ()

<ObjectView>:
    size_hint_y: None
    height: self.minimum_height
    cols: 1
    GraphZone:
        device: root.device
    GridLayout:
        cols: 1 if self.width < 1000 else 2
        id: grid
        size_hint_y: None
        height: self.minimum_height
        GridLayout:
            size_hint_y: None
            orientation: 'vertical'
            height: self.minimum_height
            cols: 1
            OscConfig:
                device: root.device
            MidiConfig:
                device: root.device

        View:
            canvas.before:
                Color:
                    rgba: 1, 1, 1, 1
            id: view
            height: 500
            size_hint_x: None
            scene: 'cube.obj'
            size_hint_y: None
            display_all: True
            scene_scale: 4.0
            cam_rotation:
                (
                root.device.ry[-1] + 90,
                root.device.rx[-1],
                - root.device.rz[-1]
                )
            cam_translation: 0, 0, -8
            light_sources:
                {x: ([float(y) * 10 - 5 for y in bin(x)[2:].rjust(3, '0')] + [1.0]) for x in range(8)}

<ConfigPanel>:
    cols: 1
    size_hint_y: None
    height: self.minimum_height

<MidiConfig>:
    GridLayout:
        rows: 1
        size_hint_y: None
        size_hint_x: None
        width: self.minimum_width
        height: line
        Label:
            text: 'sensor'
            size_hint_x: None
            width: config_sensor_width
        Label:
            text: 'active'
            size_hint_x: None
            width: config_active_width
        Label:
            text: 'event type'
            size_hint_x: None
            width: config_event_type_width
        Label:
            text: 'channel'
            text_size: self.size
            size_hint_x: None
            width: config_midi_channel_width
        Label:
            text: 'event id'
            size_hint_x: None
            width: config_event_id_width
        Label:
            text: 'event value'
            size_hint_x: None
            width: config_event_value_width

    GridLayout:
        cols: 1
        id: content
        size_hint_y: None
        height: self.minimum_height

<MidiSensorLine>:
    size_hint_y: None
    height: small_line
    Label:
        text: root.sensor
        size_hint_x: None
        width: config_sensor_width

    CheckBox:
        active: root.active
        on_active: root.active = self.active
        size_hint_x: None
        width: config_active_width

    Spinner:
        text: root.signal
        values: ('Note On', 'Note Off', 'Note Aftertouch', 'Controller')
        on_text: root.signal = self.text
        size_hint_x: None
        width: config_event_type_width

    Spinner:
        text: root.chan
        values: ('%s' % x for x in range(16))
        on_text: root.chan = self.text
        size_hint_x: None
        width: config_midi_channel_width
        hint_text: '0-127'

    TextInput:
        text: root.event_id
        on_text_validate: root.event_id = self.text
        size_hint_x: None
        width: config_event_id_width
        hint_text: '0-127 or v'

    TextInput:
        text: root.event_value
        on_text_validate: root.event_value = self.text
        size_hint_x: None
        width: config_event_value_width
        hint_text: '0-127 or v'

<OscConfig>:
    GridLayout:
        rows: 1
        size_hint_y: None
        size_hint_x: None
        width: self.minimum_width
        height: '48sp'
        Label:
            text: 'ip'
            size_hint_x: None
            width: config_ip_width
        Label:
            text: 'port'
            size_hint_x: None
            width: config_port_width
        Label:
            text: 'address'
            size_hint_x: None
            width: config_address_width
        Label:
            text: 'content'
            size_hint_x: None
            width: config_content_width
        Label:
            text: 'delete'
            size_hint_x: None
            width: config_delete_width

    GridLayout:
        cols: 1
        id: content
        size_hint_y: None
        height: self.minimum_height

    Button:
        text: '+'
        size_hint_y: None
        height: small_line
        visible: len(content.children) < 6
        opacity: 1 if self.visible else 0
        disabled: not self.visible
        on_press: root.add_line()

<OscConfigLine>:
    size_hint_y: None
    height: small_line
    TextInput:
        text: root.ip
        on_text: root.ip = self.text
        size_hint_x: None
        width: config_ip_width

    TextInput:
        text: root.port
        on_text: root.port = self.text
        background_color: white if self.text .isdigit() else red # don't remove the space!
        size_hint_x: None
        width: config_port_width

    TextInput:
        text: root.address
        on_text: root.address = self.text
        background_color: white if self.text .startswith('/') else red # don't remove the space!
        size_hint_x: None
        width: config_address_width

    TextInput:
        text: root.content
        on_text: root.content = self.text
        background_color: white if all(x in app.sensor_list for x in self.text .split(',')) else red # don't remove the space!
        size_hint_x: None
        width: config_content_width


    Button:
        text: 'x'
        on_press: root.config.remove_line(root)
        width: config_delete_width

<PloogDevice>:
    size_hint_y: None
    height: line

    BoxLayout:
        pos_hint: {'center': (.5, .5)}
        Label:
            text: root.address
            size_hint_x: None
            width: ploog_address_width
        Label:
            text: root.name
            size_hint_x: None
            width: ploog_id_width
        Label:
            text: '%sdb' % root.power
            size_hint_x: None
            width: ploog_power_width

        CheckBox:
            active: root.active
            on_active: root.active = self.active
            size_hint_x: None
            width: ploog_activate_width

        CheckBox:
            active: root.display
            on_active: root.display = self.active
            size_hint_x: None
            width: ploog_visu_width

<TextInput>:
    multiline: False
